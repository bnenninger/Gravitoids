


ARM Macro Assembler    Page 1 


    1 00000000         ; blinky2.s
    2 00000000         ; CopyLeft :-) Cristinel (Cris) Ababei, Marquette Univer
                       sity, 2020
    3 00000000         ; this program turns on and off the LED labeled LD11 fro
                       m the 
    4 00000000         ; group of 8 LED on the TigerLand 2.0 board; 
    5 00000000         ; this is one assembly implementation of the blinky exam
                       ple;
    6 00000000         ; target microcontroler: LPC1768 available on TigerLand 
                       2.0 board;
    7 00000000         ; Note1: it has lots of comments, as it is intended for 
                       the one who
    8 00000000         ; sees for the first time assembly;
    9 00000000         ; Note2: some parts of the implementation are written in
                        a more complicated manner
   10 00000000         ; than necessary for the purpose of illustrating for exa
                       mple different memory 
   11 00000000         ; addressing methods;
   12 00000000         
   13 00000000         ; Directives
   14 00000000         ; they assist and control the assembly process; directiv
                       es or "pseudo-ops"
   15 00000000         ; are not part of the instruction set; they change the w
                       ay the code is assembled;
   16 00000000         
   17 00000000         ; THUMB directive placed at the top of the file to speci
                       fy that
   18 00000000         ; code is generated with Thumb instructions;
   19 00000000                 THUMB
   20 00000000         ; some directives define where and how the objects (code
                        and variables) are
   21 00000000         ; placed in memory; here is a list with some examples:
   22 00000000         ; AREA, in assembly code, the smallest locatable unit is
                        an AREA
   23 00000000         ; CODE is the place for machine instructions (typically 
                       flash ROM)
   24 00000000         ; DATA is the place for global variables (typically RAM)
                       
   25 00000000         ; STACK is the place for the stack (also in RAM)
   26 00000000         ; ALIGN=n modifier starts the area aligned to 2^n bytes
   27 00000000         ; |.text| is used to connect this program with the C cod
                       e generated by
   28 00000000         ; the compiler, which we need if linking assembly code t
                       o C code;
   29 00000000         ; it is also needed for code sections associated with th
                       e C library;
   30 00000000         ; NONINT defines a RAM area that is not initialized (nor
                       mally RAM areas are
   31 00000000         ; initialized to zero); Note: ROM begins at 0x00000000 a
                       nd RAM begins at 
   32 00000000         ; 0x2000000;
   33 00000000         ; EXPORT is a directive in a file where we define an obj
                       ect and 
   34 00000000         ; IMPORT directive is used in a file from where we wish 
                       to access the object;
   35 00000000         ; Note: we can export a function in an assembly file and
                        call the function
   36 00000000         ; from a C file; also, we can define a function in C fil
                       e, and IMPORT the function



ARM Macro Assembler    Page 2 


   37 00000000         ; into an assembly file;
   38 00000000         ; GLOBAL is a synonym for EXPORT
   39 00000000         ; ALIGN directive is used to ensure the next object is a
                       ligned properly; for example,
   40 00000000         ; machine instructions must be half-word aligned, 32-bit
                        data accessed with LDR, STR
   41 00000000         ; must be word-aligned; good programmers place an ALIGN 
                       at the end of each file so the
   42 00000000         ; start of every file is automatically aligned;
   43 00000000         ; END directive is placed at the end of each file
   44 00000000         ; EQU directive gives a symbolic name to a numeric const
                       ant, a register-relative 
   45 00000000         ; value or a program-relative value; we'll use EQU to de
                       fine I/O port addresses;
   46 00000000                 AREA             |.text|, CODE, READONLY ; follo
                                                            wing lines are to b
                                                            e placed in code sp
                                                            ace
   47 00000000                 EXPORT           __main
   48 00000000                 ENTRY
   49 00000000         
   50 00000000         ; EQUates to make the code more readable; 
   51 00000000         ; to turn LED LD11 of the TigerLand board on/off (contro
                       lled by the port P2.0 of the MCU),
   52 00000000         ; we will later write the bit 0 of the registers FIO2SET
                        (to set HIGH) and FIO2CLR (to set LOW); 
   53 00000000         ; refer to page 131 of the LPC17xx user manual to see th
                       e adresses of these registers; they are:
   54 00000000 2009C058 
                       FIO2SET EQU              0x2009C058
   55 00000000 2009C05C 
                       FIO2CLR EQU              0x2009C05C
   56 00000000         ; we will implement a dirty delay by decrementing a larg
                       e enough
   57 00000000         ; number of times a register;
   58 00000000 00989680 
                       LEDDELAY
                               EQU              10000000
   59 00000000         
   60 00000000         __main
   61 00000000         
   62 00000000         ; (1) we want to set as output the direction of the pins
                        that 
   63 00000000         ; drive the 8 LEDs; these pins belong to the port Port 2
                        of the MCU, and are,
   64 00000000         ; as shown on page 6 of the schematic diagram of the Tig
                       erLand board:
   65 00000000         ; P2.7, P2.6, P2.5, P2.4, P2.3, P2.2, P2.1, and P2.0
   66 00000000         ; driving the LEDs labeled on the board as:
   67 00000000         ; LD4, LD5, LD6, LD7, LD8, LD9, LD10, LD11
   68 00000000         ; to set them as output, we must set to 1 the correspond
                       ing bits in
   69 00000000         ; registers (page 131 of LPC17xx user manual):
   70 00000000         ; FIO2DIR - 0x2009C040
   71 00000000         ; that is, we'll set to 1 bits 0,1,2,...,7 of the regist
                       er at adress 0x2009C040,
   72 00000000         ; which means writing 0x000000FF to this location; 
   73 00000000 F04F 0100       MOV              R1, #0x0    ; init R1 register 
                                                            to 0 to "construct"



ARM Macro Assembler    Page 3 


                                                             address of interes
                                                            t
   74 00000004 F2C2 0109       MOVT             R1, #0x2009 ; assign 0x20090000
                                                             to R1; MOVT assign
                                                            s to upper nibble
   75 00000008 F44F 4340       MOV              R3, #0xC000 ; move 0xC000 into 
                                                            R3
   76 0000000C 4419            ADD              R1, R1, R3  ; add 0xC000 to R1 
                                                            to "construct" 0x20
                                                            09C000
   77 0000000E F04F 04FF       MOV              R4, #0x000000FF ; place 0x00000
                                                            0FF (i.e., bits 0..
                                                            7) into R4
   78 00000012         ; now, place contents of R4 (i.e. 0x000000FF) to address
                        
   79 00000012         ; 0x2009C040 (i.e., register FIO2DIR); this sets pins 
   80 00000012         ; 0..7 with direction as output;
   81 00000012         ; Note: address is created by adding the offset 0x40 to 
                       R1
   82 00000012         ; Note: the entire "complication" above could be replace
                       d with
   83 00000012         ; simply loading R1 with =FIO2DIR (but we wanted to expe
                       riment with
   84 00000012         ; different flavors of MOV, to upper and lower nibbles);
                        we'll use
   85 00000012         ; the simpler version later;
   86 00000012 640C            STR              R4, [R1, #0x40] ; effectively w
                                                            rite 0x000000FF at 
                                                            address location 0x
                                                            2009C040
   87 00000014         
   88 00000014         ; (2) set HIGH the LED LD11 driven by P2.0; to do that w
                       e load current
   89 00000014         ; contents of register FIO2SET (i.e., memory address 0x2
                       009C058) to R3,
   90 00000014         ; set to 1 its bit index 0, and then put it back into th
                       e location at
   91 00000014         ; memory address 0x2009C058 (i.e., effectively writing i
                       nto register FIO2SET);
   92 00000014 490A            LDR              R1, =FIO2SET ; we'll not touch 
                                                            R1 anymore so that 
                                                            it keeps this addre
                                                            ss
   93 00000016 680B            LDR              R3, [R1]
   94 00000018 F043 0301       ORR              R3, #0x00000001 ; set to logic 
                                                            1 bit index 0 of R3
                                                            
   95 0000001C 600B            STR              R3, [R1]
   96 0000001E         
   97 0000001E         ; (3) some initializations; 
   98 0000001E 4809            LDR              R0, =LEDDELAY ; initialize R0 f
                                                            or countdown
   99 00000020 4A09            LDR              R2, =FIO2CLR ; we'll not touch 
                                                            R2 anymore so that 
                                                            it keeps this addre
                                                            ss
  100 00000022         
  101 00000022         ; now, the main thing: turn the LED LD11 driven by P2.1 
                       on/off repeatedly;



ARM Macro Assembler    Page 4 


  102 00000022         ; this is done by setting to logic 1 alternatively the b
                       it 0 of 
  103 00000022         ; registers FIO2CLR and FIO2SET;
  104 00000022         ; Note: one could do this in a simpler way by using a to
                       ggling trick:
  105 00000022         ; toggle (could be done using exclusive or with 1) bit 0
                        of register 
  106 00000022         ; FIO2PIN instead (page 131 of LPC17xx user manual) and 
                       not use 
  107 00000022         ; FIO2CLR and FIO2SET; this is not recommended however;
  108 00000022         loop
  109 00000022         led_on
  110 00000022 3801            SUBS             R0, #1      ; decrement R0; thi
                                                            s sets N,Z,V,C stat
                                                            us bits
  111 00000024 D1FD            BNE              led_on      ; if zero not reach
                                                            ed yet, go back and
                                                             keep decrementing
  112 00000026 6813            LDR              R3, [R2]    ; recall that R2 st
                                                            ores =FIO2CLR
  113 00000028 F043 0301       ORR              R3, #0x00000001 ; set to logic 
                                                            1 bit index 0 of R3
                                                              
  114 0000002C 6013            STR              R3, [R2]    ; place R3 contents
                                                             into FIO2CLR, whic
                                                            h will put pin on L
                                                            OW
  115 0000002E 4805            LDR              R0, =LEDDELAY ; initialize R0 f
                                                            or countdown
  116 00000030         led_off
  117 00000030 3801            SUBS             R0, #1      ; decrement R0; thi
                                                            s sets N,Z,V,C stat
                                                            us bits
  118 00000032 D1FD            BNE              led_off     ; if zero not reach
                                                            ed yet, go back and
                                                             keep decrementing
  119 00000034 680B            LDR              R3, [R1]    ; recall that R1 st
                                                            ores =FIO2SET
  120 00000036 F043 0301       ORR              R3, #0x00000001 ; set to logic 
                                                            1 bit index o of R3
                                                              
  121 0000003A 600B            STR              R3, [R1]    ; place R3 contents
                                                             into FIO2SET, whic
                                                            h will put pin on H
                                                            IGH
  122 0000003C 4801            LDR              R0, =LEDDELAY ; initialize R0 f
                                                            or countdown
  123 0000003E         ; now do it again;
  124 0000003E E7F0            B                loop
  125 00000040         
  126 00000040                 ALIGN
  127 00000040                 END
              2009C058 
              00989680 
              2009C05C 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\blinky2.d -o.\objects\blinky2.o -I.\RTE\Device\LPC1768 -
I.\RTE\_Target_1 -IC:\Users\Kassie\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSI
S\Core\Include -IC:\Users\Kassie\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.7.0



ARM Macro Assembler    Page 5 


\Device\Include -IC:\Users\Kassie\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.7.
0\RTE_Driver --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 53
2" --predefine="_RTE_ SETA 1" --predefine="LPC175x_6x SETA 1" --predefine="_RTE
_ SETA 1" --list=.\listings\blinky2.lst ..\..\Example2\blinky2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 46 in file ..\..\Example2\blinky2.s
   Uses
      None
Comment: .text unused
__main 00000000

Symbol: __main
   Definitions
      At line 60 in file ..\..\Example2\blinky2.s
   Uses
      At line 47 in file ..\..\Example2\blinky2.s
Comment: __main used once
led_off 00000030

Symbol: led_off
   Definitions
      At line 116 in file ..\..\Example2\blinky2.s
   Uses
      At line 118 in file ..\..\Example2\blinky2.s
Comment: led_off used once
led_on 00000022

Symbol: led_on
   Definitions
      At line 109 in file ..\..\Example2\blinky2.s
   Uses
      At line 111 in file ..\..\Example2\blinky2.s
Comment: led_on used once
loop 00000022

Symbol: loop
   Definitions
      At line 108 in file ..\..\Example2\blinky2.s
   Uses
      At line 124 in file ..\..\Example2\blinky2.s
Comment: loop used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FIO2CLR 2009C05C

Symbol: FIO2CLR
   Definitions
      At line 55 in file ..\..\Example2\blinky2.s
   Uses
      At line 99 in file ..\..\Example2\blinky2.s
Comment: FIO2CLR used once
FIO2SET 2009C058

Symbol: FIO2SET
   Definitions
      At line 54 in file ..\..\Example2\blinky2.s
   Uses
      At line 92 in file ..\..\Example2\blinky2.s
Comment: FIO2SET used once
LEDDELAY 00989680

Symbol: LEDDELAY
   Definitions
      At line 58 in file ..\..\Example2\blinky2.s
   Uses
      At line 98 in file ..\..\Example2\blinky2.s
      At line 115 in file ..\..\Example2\blinky2.s
      At line 122 in file ..\..\Example2\blinky2.s

3 symbols
344 symbols in table
